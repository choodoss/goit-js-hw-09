{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QA+BpCF,EAAKG,iBAAiB,UA5BtB,SAAkCC,GAChCA,EAAEC,iBAOF,IANA,IAAMC,EAAaC,OAAOP,EAAKE,cAAc,uBAAuBM,OAC9DC,EAAYF,OAAOP,EAAKE,cAAc,sBAAsBM,OAC5DE,EAASH,OAAOP,EAAKE,cAAc,wBAAwBM,OAE7DG,EAAaL,EAERM,EAAM,EAAGA,GAAOF,EAAQE,GAAO,EAAG,EACzB,SAACC,EAAKC,GACpB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,uBAAmCM,OAAVT,EAAI,QAAiBS,OAAXR,EAAW,OAEpDG,EAAK,sBAAgCK,OAAVT,EAAI,QAAiBS,OAAXR,EAAW,M,GAEnDA,E,KAGPS,CAAQX,EAAKD,GACVa,MAAK,SAACC,G,OAAW3B,EAAA4B,OAAOC,QAAQF,E,IAChCG,OAAM,SAACH,G,OAAW3B,EAAA4B,OAAOG,QAAQJ,E,IACpCd,GAAcF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\nconst form = document.querySelector('form');\n\n\nfunction hendleStartCreatePromise(e) {\n  e.preventDefault()\n  const firstDelay = Number(form.querySelector('input[name=\"delay\"]').value);\n  const stepDelay = Number(form.querySelector('input[name=\"step\"]').value);\n  const amount = Number(form.querySelector('input[name=\"amount\"]').value);\n\n  let secondStep = firstDelay;\n\n  for (let num = 1; num <= amount; num += 1) {\n    const promise = (num, secondStep) => {\n      return new Promise((resolve, reject) => {\n        const shouldResolve = Math.random() > 0.3;\n        setTimeout(() => {\n          if (shouldResolve) {\n            resolve(`✅ Fulfilled promise ${num} in ${secondStep}ms`)\n          } else {\n            reject(`❌ Rejected promise ${num} in ${secondStep}ms`)\n          }\n        }, secondStep)\n      })\n    };\n    promise(num, secondStep)\n      .then((answer) => Notify.success(answer))\n      .catch((answer) => Notify.failure(answer));\n    secondStep += stepDelay;\n  }\n};\n\nform.addEventListener('submit', hendleStartCreatePromise);"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","e","preventDefault","firstDelay","Number","value","stepDelay","amount","secondStep1","num1","num","secondStep","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","promise","then","answer","Notify","success","catch","failure"],"version":3,"file":"03-promises.919c67c5.js.map"}